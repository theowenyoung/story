import { hmac } from "https://deno.land/x/hmac@v2.0.1/mod.ts";
import { v4 } from "https://deno.land/std@0.51.0/uuid/mod.ts";
export class TwitterApi {
    oauth_consumer_key;
    oauth_consumer_secret;
    oauth_token;
    oauth_token_secret;
    settings;
    baseUrl = "https://api.twitter.com/1.1/";
    oauth_version = "1.0";
    oauth_signature_method = "HMAC-SHA1";
    constructor(keys, settings) {
        this.oauth_consumer_key = keys.consumerApiKey;
        this.oauth_consumer_secret = keys.consumerApiSecret;
        this.oauth_token = keys.accessToken;
        this.oauth_token_secret = keys.accessTokenSecret;
        this.settings = Object.assign({ apiVersion: '1.1' }, settings);
        this.baseUrl = 'https://api.twitter.com/' + this.settings.apiVersion + '/';
    }
    getBaseUrl() {
        return this.baseUrl;
    }
    setBaseUrl(baseUrl) {
        this.baseUrl = baseUrl;
    }
    async get(url, options) {
        return await this.request("GET", url, options);
    }
    async post(url, options) {
        return await this.request("POST", url, options);
    }
    async request(method, url, options) {
        if (options == null)
            options = {};
        let oauth_nonce = this.generateNonce();
        let oauth_timestamp = this.getCurrentTimestamp();
        let oauth_signature = this.createSignature(oauth_nonce, oauth_timestamp, {
            options,
            method,
            url
        });
        let authHeader = this.createAuthHeader(oauth_nonce, oauth_timestamp, oauth_signature);
        let headers = new Headers({
            "Authorization": authHeader,
            "Content-Type": "application/json"
        });
        let request = new Request(this.baseUrl + url + "?" + new URLSearchParams(options).toString(), {
            method,
            headers,
        });
        return await fetch(request);
    }
    createSignature(oauth_nonce, oauth_timestamp, { options, method, url }) {
        let signatureString = "";
        let paramPairs = [];
        let params = {
            "oauth_consumer_key": this.oauth_consumer_key,
            "oauth_nonce": oauth_nonce,
            "oauth_signature_method": this.oauth_signature_method,
            "oauth_timestamp": oauth_timestamp,
            "oauth_token": this.oauth_token,
            "oauth_version": this.oauth_version,
            ...options,
        };
        for (let k in params) {
            let v = params[k];
            paramPairs.push(this.percentEncode(k) + "=" + this.percentEncode(v));
        }
        paramPairs.sort();
        signatureString = method + "&"
            + this.percentEncode(this.baseUrl + url) + "&"
            + this.percentEncode(paramPairs.join("&"));
        let signatureBaseString = signatureString;
        let signingKey = this.percentEncode(this.oauth_consumer_secret)
            + "&"
            + this.percentEncode(this.oauth_token_secret);
        let hmacSha1 = hmac("sha1", signingKey, signatureBaseString, "utf8", "base64").toString();
        return hmacSha1;
    }
    createAuthHeader(oauth_nonce, oauth_timestamp, oauth_signature) {
        return [
            "OAuth ",
            this.encodeAuthHeaderKeyValuePair("oauth_consumer_key", this.oauth_consumer_key) + ", ",
            this.encodeAuthHeaderKeyValuePair("oauth_nonce", oauth_nonce) + ", ",
            this.encodeAuthHeaderKeyValuePair("oauth_signature", oauth_signature) + ", ",
            this.encodeAuthHeaderKeyValuePair("oauth_signature_method", this.oauth_signature_method) + ", ",
            this.encodeAuthHeaderKeyValuePair("oauth_timestamp", oauth_timestamp) + ", ",
            this.encodeAuthHeaderKeyValuePair("oauth_token", this.oauth_token) + ", ",
            this.encodeAuthHeaderKeyValuePair("oauth_version", this.oauth_version)
        ].join("");
    }
    encodeAuthHeaderKeyValuePair(key, value) {
        return this.percentEncode(key)
            + "=\""
            + this.percentEncode(value)
            + "\"";
    }
    percentEncode(val) {
        let encodedVal = encodeURIComponent(val);
        let reservedChars = [
            { match: /\!/g, replace: "%21" },
            { match: /\#/g, replace: "%23" },
            { match: /\$/g, replace: "%24" },
            { match: /\&/g, replace: "%26" },
            { match: /\'/g, replace: "%27" },
            { match: /\(/g, replace: "%28" },
            { match: /\)/g, replace: "%29" },
            { match: /\*/g, replace: "%2A" },
            { match: /\+/g, replace: "%2B" },
            { match: /\,/g, replace: "%2C" },
            { match: /\//g, replace: "%2F" },
            { match: /\:/g, replace: "%3A" },
            { match: /\;/g, replace: "%3B" },
            { match: /\=/g, replace: "%3D" },
            { match: /\?/g, replace: "%3F" },
            { match: /\@/g, replace: "%40" },
            { match: /\[/g, replace: "%5B" },
            { match: /\]/g, replace: "%5D" },
        ];
        encodedVal = reservedChars.reduce((tot, { match, replace }) => {
            return tot.replace(match, replace);
        }, encodedVal);
        return encodedVal;
    }
    generateNonce() {
        return v4.generate().replace(/-/g, "");
    }
    getCurrentTimestamp() {
        return Math.floor(new Date().valueOf() / 1000).toString();
    }
}
//# sourceMappingURL=data:application/json;base64,
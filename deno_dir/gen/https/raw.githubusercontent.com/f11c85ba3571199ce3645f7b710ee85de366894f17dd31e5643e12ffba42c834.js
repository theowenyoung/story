import { get } from "./utils/get.ts";
export function getSourceItemUniqueKey(item, sourceIndex, sourceOptions) {
    const defaultKeysFields = [
        "id",
        "guid",
        "_id",
        "objectId",
        "objectID",
        "ID",
        "url",
        "link",
    ];
    const keyFields = sourceOptions.key
        ? [sourceOptions.key].concat(defaultKeysFields)
        : defaultKeysFields;
    let itemKey;
    for (let keyFieldIndex = 0; keyFieldIndex < keyFields.length; keyFieldIndex++) {
        const keyField = keyFields[keyFieldIndex];
        itemKey = get(item, keyField);
        if (typeof itemKey === "string") {
            break;
        }
    }
    const sourcePrefix = sourceOptions.id || sourceIndex;
    if (itemKey) {
        return `${sourcePrefix}${itemKey}`;
    }
    else {
        return undefined;
    }
}
export function getSourceItemsFromResult(ctx, sourceOptions) {
    const { reporter } = sourceOptions;
    const force = sourceOptions?.force;
    let items = ctx.public.result;
    if (sourceOptions.itemsPath) {
        items = get(ctx.public.result, sourceOptions.itemsPath);
    }
    if (!Array.isArray(items)) {
        throw new Error("source result must be an array, but got " + typeof items);
    }
    const finalItems = [];
    for (let itemIndex = 0; itemIndex < items.length; itemIndex++) {
        const item = items[itemIndex];
        const key = getSourceItemUniqueKey(item, ctx.public.sourceIndex, sourceOptions);
        if (key === undefined) {
            reporter.warning(`will be directly added to items`, "No unique key");
        }
        if (key !== undefined && ctx.internalState &&
            (ctx.internalState.keys || []).includes(key) &&
            !force) {
            reporter.debug(`${key}, cause it has been processed`, "Skip item");
            continue;
        }
        else if (key !== undefined && ctx.internalState &&
            (ctx.internalState.keys || []).includes(key) && force) {
            reporter.debug(`${key}, cause --force is true`, "Add processed item");
        }
        else if (force) {
            reporter.debug(`${key}`, "add item");
        }
        finalItems.push(item);
    }
    ctx.public.items = finalItems;
    return ctx;
}
export function filterCtxItems(ctx, filterOptions) {
    const { reporter } = filterOptions;
    const limit = filterOptions?.limit;
    const items = ctx.public.items;
    if (!Array.isArray(items)) {
        throw new Error("ctx.items must be an array, but got " + typeof items + ", filter failed");
    }
    reporter.debug(`Input ${items.length} items`);
    const finalItems = [];
    const finalItemKeys = [];
    const finalItemSourceOptions = [];
    for (let i = 0; i < items.length; i++) {
        if (limit !== undefined && limit > 0 && finalItems.length >= limit) {
            break;
        }
        const item = items[i];
        finalItems.push(item);
    }
    ctx.public.items = finalItems;
    reporter.debug(`Output ${ctx.public.items.length} items`);
    return ctx;
}
//# sourceMappingURL=data:application/json;base64,
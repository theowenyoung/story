import deepmerge from "https://esm.sh/deepmerge@4.2.2";
const ValidWorkflowFlags = [
    "if",
    "debug",
    "database",
    "sleep",
    "limit",
    "force", 
];
const ValidCliWorkflowFlags = ValidWorkflowFlags.concat("files");
function filterValidSourceOptions(options) {
    const { force , limit , debug  } = options || {};
    const validSourceOptions = {
        force,
        limit,
        debug
    };
    Object.keys(validSourceOptions).forEach((key)=>validSourceOptions[key] === undefined && delete validSourceOptions[key]);
    return validSourceOptions;
}
function filterValidCliOptions(options) {
    const validWorkflowOptions = {};
    ValidCliWorkflowFlags.forEach((key)=>{
        if (key in options) {
            validWorkflowOptions[key] = options[key];
        }
    });
    return validWorkflowOptions;
}
function filterValidWorkflowOptions(options) {
    const validWorkflowOptions = {};
    ValidWorkflowFlags.forEach((key)=>{
        if (key in options) {
            validWorkflowOptions[key] = options[key];
        }
    });
    return validWorkflowOptions;
}
export function getFinalWorkflowOptions(WorkflowOptions, runWorkflowOptions) {
    let database = "json://data";
    if (runWorkflowOptions.content) {
        database = "json:///tmp/denoflow/data";
    }
    const defaultOptions = {
        debug: false,
        database: database,
        if: true
    };
    const finalOptions = mergeAll([
        defaultOptions,
        filterValidWorkflowOptions(WorkflowOptions),
        filterValidCliOptions(runWorkflowOptions), 
    ]);
    return finalOptions;
}
export function getFinalSourceOptions(WorkflowOptions, runWorkflowOptions, sourceOptions) {
    const defaultOptions = {
        force: false,
        debug: false,
        if: true
    };
    const validRunWorkflowOptions = filterValidSourceOptions(runWorkflowOptions);
    const finalOptions = mergeAll([
        defaultOptions,
        WorkflowOptions,
        sourceOptions,
        validRunWorkflowOptions, 
    ]);
    return finalOptions;
}
export function getFinalRunOptions(runWorkflowOptions, isDebug) {
    const defaultOptions = {
        files: [
            "workflows"
        ],
        debug: isDebug,
        stdin: false
    };
    const finalOptions = mergeAll([
        defaultOptions,
        runWorkflowOptions, 
    ]);
    return finalOptions;
}
const overwriteMerge = (_, sourceArray, __)=>sourceArray;
export function mergeAll(arr) {
    return deepmerge.all(arr, {
        arrayMerge: overwriteMerge
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImh0dHBzOi8vZGVuby5sYW5kL3gvZGVub2Zsb3dAMC4wLjMzL2NvcmUvZGVmYXVsdC1vcHRpb25zLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIFJ1bldvcmtmbG93T3B0aW9ucyxcbiAgU291cmNlT3B0aW9ucyxcbiAgV29ya2Zsb3dPcHRpb25zLFxufSBmcm9tIFwiLi9pbnRlcmZhY2UudHNcIjtcbmltcG9ydCB7IEludGVybmFsUnVuV29ya2Zsb3dPcHRpb25zIH0gZnJvbSBcIi4vaW50ZXJuYWwtaW50ZXJmYWNlLnRzXCI7XG5pbXBvcnQgZGVlcG1lcmdlIGZyb20gXCJodHRwczovL2VzbS5zaC9kZWVwbWVyZ2VANC4yLjJcIjtcblxuY29uc3QgVmFsaWRXb3JrZmxvd0ZsYWdzID0gW1xuICBcImlmXCIsXG4gIFwiZGVidWdcIixcbiAgXCJkYXRhYmFzZVwiLFxuICBcInNsZWVwXCIsXG4gIFwibGltaXRcIixcbiAgXCJmb3JjZVwiLFxuXTtcbmNvbnN0IFZhbGlkQ2xpV29ya2Zsb3dGbGFncyA9IFZhbGlkV29ya2Zsb3dGbGFncy5jb25jYXQoXCJmaWxlc1wiKTtcbmZ1bmN0aW9uIGZpbHRlclZhbGlkU291cmNlT3B0aW9ucyhcbiAgb3B0aW9uczogUnVuV29ya2Zsb3dPcHRpb25zLFxuKTogU291cmNlT3B0aW9ucyB7XG4gIGNvbnN0IHsgZm9yY2UsIGxpbWl0LCBkZWJ1ZyB9ID0gb3B0aW9ucyB8fCB7fTtcblxuICBjb25zdCB2YWxpZFNvdXJjZU9wdGlvbnM6IFJlY29yZDxzdHJpbmcsIHVua25vd24+ID0ge1xuICAgIGZvcmNlLFxuICAgIGxpbWl0LFxuICAgIGRlYnVnLFxuICB9O1xuICBPYmplY3Qua2V5cyh2YWxpZFNvdXJjZU9wdGlvbnMpLmZvckVhY2goKGtleSkgPT5cbiAgICB2YWxpZFNvdXJjZU9wdGlvbnNba2V5XSA9PT0gdW5kZWZpbmVkICYmIGRlbGV0ZSB2YWxpZFNvdXJjZU9wdGlvbnNba2V5XVxuICApO1xuXG4gIHJldHVybiB2YWxpZFNvdXJjZU9wdGlvbnM7XG59XG5mdW5jdGlvbiBmaWx0ZXJWYWxpZENsaU9wdGlvbnMoXG4gIG9wdGlvbnM6IFJ1bldvcmtmbG93T3B0aW9ucyxcbik6IFJ1bldvcmtmbG93T3B0aW9ucyB7XG4gIGNvbnN0IHZhbGlkV29ya2Zsb3dPcHRpb25zOiBSdW5Xb3JrZmxvd09wdGlvbnMgPSB7fTtcbiAgVmFsaWRDbGlXb3JrZmxvd0ZsYWdzLmZvckVhY2goKGtleSkgPT4ge1xuICAgIGlmIChrZXkgaW4gb3B0aW9ucykge1xuICAgICAgdmFsaWRXb3JrZmxvd09wdGlvbnNba2V5XSA9IG9wdGlvbnNba2V5XTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gdmFsaWRXb3JrZmxvd09wdGlvbnM7XG59XG5mdW5jdGlvbiBmaWx0ZXJWYWxpZFdvcmtmbG93T3B0aW9ucyhcbiAgb3B0aW9uczogV29ya2Zsb3dPcHRpb25zLFxuKTogV29ya2Zsb3dPcHRpb25zIHtcbiAgY29uc3QgdmFsaWRXb3JrZmxvd09wdGlvbnM6IFdvcmtmbG93T3B0aW9ucyA9IHt9O1xuXG4gIFZhbGlkV29ya2Zsb3dGbGFncy5mb3JFYWNoKChrZXkpID0+IHtcbiAgICBpZiAoa2V5IGluIG9wdGlvbnMpIHtcbiAgICAgIHZhbGlkV29ya2Zsb3dPcHRpb25zW2tleV0gPSBvcHRpb25zW2tleV07XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4gdmFsaWRXb3JrZmxvd09wdGlvbnM7XG59XG5leHBvcnQgZnVuY3Rpb24gZ2V0RmluYWxXb3JrZmxvd09wdGlvbnMoXG4gIFdvcmtmbG93T3B0aW9uczogV29ya2Zsb3dPcHRpb25zLFxuICBydW5Xb3JrZmxvd09wdGlvbnM6IFJ1bldvcmtmbG93T3B0aW9ucyxcbik6IFdvcmtmbG93T3B0aW9ucyB7XG4gIGxldCBkYXRhYmFzZSA9IFwianNvbjovL2RhdGFcIjtcbiAgaWYgKHJ1bldvcmtmbG93T3B0aW9ucy5jb250ZW50KSB7XG4gICAgZGF0YWJhc2UgPSBcImpzb246Ly8vdG1wL2Rlbm9mbG93L2RhdGFcIjtcbiAgfVxuICBjb25zdCBkZWZhdWx0T3B0aW9uczogV29ya2Zsb3dPcHRpb25zID0ge1xuICAgIGRlYnVnOiBmYWxzZSxcbiAgICBkYXRhYmFzZTogZGF0YWJhc2UsXG4gICAgaWY6IHRydWUsXG4gIH07XG4gIGNvbnN0IGZpbmFsT3B0aW9uczogV29ya2Zsb3dPcHRpb25zID0gbWVyZ2VBbGwoW1xuICAgIGRlZmF1bHRPcHRpb25zLFxuICAgIGZpbHRlclZhbGlkV29ya2Zsb3dPcHRpb25zKFdvcmtmbG93T3B0aW9ucyksXG4gICAgZmlsdGVyVmFsaWRDbGlPcHRpb25zKHJ1bldvcmtmbG93T3B0aW9ucyksXG4gIF0pO1xuXG4gIHJldHVybiBmaW5hbE9wdGlvbnM7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRGaW5hbFNvdXJjZU9wdGlvbnMoXG4gIFdvcmtmbG93T3B0aW9uczogV29ya2Zsb3dPcHRpb25zLFxuICBydW5Xb3JrZmxvd09wdGlvbnM6IFJ1bldvcmtmbG93T3B0aW9ucyxcbiAgc291cmNlT3B0aW9uczogU291cmNlT3B0aW9ucyxcbik6IFNvdXJjZU9wdGlvbnMge1xuICBjb25zdCBkZWZhdWx0T3B0aW9uczogU291cmNlT3B0aW9ucyA9IHtcbiAgICBmb3JjZTogZmFsc2UsXG4gICAgZGVidWc6IGZhbHNlLFxuICAgIGlmOiB0cnVlLFxuICB9O1xuXG4gIGNvbnN0IHZhbGlkUnVuV29ya2Zsb3dPcHRpb25zID0gZmlsdGVyVmFsaWRTb3VyY2VPcHRpb25zKFxuICAgIHJ1bldvcmtmbG93T3B0aW9ucyxcbiAgKTtcbiAgY29uc3QgZmluYWxPcHRpb25zOiBTb3VyY2VPcHRpb25zID0gbWVyZ2VBbGwoW1xuICAgIGRlZmF1bHRPcHRpb25zLFxuICAgIFdvcmtmbG93T3B0aW9ucyxcbiAgICBzb3VyY2VPcHRpb25zLFxuICAgIHZhbGlkUnVuV29ya2Zsb3dPcHRpb25zLFxuICBdKSBhcyBTb3VyY2VPcHRpb25zO1xuXG4gIHJldHVybiBmaW5hbE9wdGlvbnM7XG59XG5leHBvcnQgZnVuY3Rpb24gZ2V0RmluYWxSdW5PcHRpb25zKFxuICBydW5Xb3JrZmxvd09wdGlvbnM6IFJ1bldvcmtmbG93T3B0aW9ucyxcbiAgaXNEZWJ1ZzogYm9vbGVhbixcbik6IEludGVybmFsUnVuV29ya2Zsb3dPcHRpb25zIHtcbiAgY29uc3QgZGVmYXVsdE9wdGlvbnM6IEludGVybmFsUnVuV29ya2Zsb3dPcHRpb25zID0ge1xuICAgIGZpbGVzOiBbXCJ3b3JrZmxvd3NcIl0sXG4gICAgZGVidWc6IGlzRGVidWcsXG4gICAgc3RkaW46IGZhbHNlLFxuICB9O1xuICBjb25zdCBmaW5hbE9wdGlvbnM6IEludGVybmFsUnVuV29ya2Zsb3dPcHRpb25zID0gbWVyZ2VBbGwoW1xuICAgIGRlZmF1bHRPcHRpb25zLFxuICAgIHJ1bldvcmtmbG93T3B0aW9ucyxcbiAgXSkgYXMgSW50ZXJuYWxSdW5Xb3JrZmxvd09wdGlvbnM7XG5cbiAgcmV0dXJuIGZpbmFsT3B0aW9ucztcbn1cbmNvbnN0IG92ZXJ3cml0ZU1lcmdlID0gKF86IHVua25vd24sIHNvdXJjZUFycmF5OiB1bmtub3duLCBfXzogdW5rbm93bikgPT5cbiAgc291cmNlQXJyYXk7XG5cbmV4cG9ydCBmdW5jdGlvbiBtZXJnZUFsbChhcnI6IHVua25vd25bXSkge1xuICByZXR1cm4gZGVlcG1lcmdlLmFsbChhcnIsIHsgYXJyYXlNZXJnZTogb3ZlcndyaXRlTWVyZ2UgfSk7XG59XG4iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBTUEsT0FBTyxTQUFTLE1BQU0sZ0NBQWdDLENBQUM7QUFFdkQsTUFBTSxrQkFBa0IsR0FBRztJQUN6QixJQUFJO0lBQ0osT0FBTztJQUNQLFVBQVU7SUFDVixPQUFPO0lBQ1AsT0FBTztJQUNQLE9BQU87Q0FDUixBQUFDO0FBQ0YsTUFBTSxxQkFBcUIsR0FBRyxrQkFBa0IsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLEFBQUM7QUFDakUsU0FBUyx3QkFBd0IsQ0FDL0IsT0FBMkIsRUFD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
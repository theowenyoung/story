import deepmerge from "https://esm.sh/deepmerge@4.2.2";
const ValidWorkflowFlags = [
    "if",
    "debug",
    "database",
    "sleep",
    "limit",
    "force",
];
const ValidCliWorkflowFlags = ValidWorkflowFlags.concat("files");
function filterValidSourceOptions(options) {
    const { force, limit, debug } = options || {};
    const validSourceOptions = {
        force,
        limit,
        debug,
    };
    Object.keys(validSourceOptions).forEach((key) => validSourceOptions[key] === undefined && delete validSourceOptions[key]);
    return validSourceOptions;
}
function filterValidCliOptions(options) {
    const validWorkflowOptions = {};
    ValidCliWorkflowFlags.forEach((key) => {
        if (key in options) {
            validWorkflowOptions[key] = options[key];
        }
    });
    return validWorkflowOptions;
}
function filterValidWorkflowOptions(options) {
    const validWorkflowOptions = {};
    ValidWorkflowFlags.forEach((key) => {
        if (key in options) {
            validWorkflowOptions[key] = options[key];
        }
    });
    return validWorkflowOptions;
}
export function getFinalWorkflowOptions(WorkflowOptions, runWorkflowOptions) {
    let database = "json://data";
    if (runWorkflowOptions.content) {
        database = "json:///tmp/denoflow/data";
    }
    const defaultOptions = {
        debug: false,
        database: database,
        if: true,
    };
    const finalOptions = mergeAll([
        defaultOptions,
        filterValidWorkflowOptions(WorkflowOptions),
        filterValidCliOptions(runWorkflowOptions),
    ]);
    return finalOptions;
}
export function getFinalSourceOptions(WorkflowOptions, runWorkflowOptions, sourceOptions) {
    const defaultOptions = {
        force: false,
        debug: false,
        if: true,
    };
    const validRunWorkflowOptions = filterValidSourceOptions(runWorkflowOptions);
    const finalOptions = mergeAll([
        defaultOptions,
        WorkflowOptions,
        sourceOptions,
        validRunWorkflowOptions,
    ]);
    return finalOptions;
}
export function getFinalRunOptions(runWorkflowOptions, isDebug) {
    const defaultOptions = {
        files: ["workflows"],
        debug: isDebug,
        stdin: false,
    };
    const finalOptions = mergeAll([
        defaultOptions,
        runWorkflowOptions,
    ]);
    return finalOptions;
}
const overwriteMerge = (_, sourceArray, __) => sourceArray;
export function mergeAll(arr) {
    return deepmerge.all(arr, { arrayMerge: overwriteMerge });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVmYXVsdC1vcHRpb25zLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiZGVmYXVsdC1vcHRpb25zLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQU1BLE9BQU8sU0FBUyxNQUFNLGdDQUFnQyxDQUFDO0FBRXZELE1BQU0sa0JBQWtCLEdBQUc7SUFDekIsSUFBSTtJQUNKLE9BQU87SUFDUCxVQUFVO0lBQ1YsT0FBTztJQUNQLE9BQU87SUFDUCxPQUFPO0NBQ1IsQ0FBQztBQUNGLE1BQU0scUJBQXFCLEdBQUcsa0JBQWtCLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0FBQ2pFLFNBQVMsd0JBQXdCLENBQy9CLE9BQTJCO0lBRTNCLE1BQU0sRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxHQUFHLE9BQU8sSUFBSSxFQUFFLENBQUM7SUFFOUMsTUFBTSxrQkFBa0IsR0FBNEI7UUFDbEQsS0FBSztRQUNMLEtBQUs7UUFDTCxLQUFLO0tBQ04sQ0FBQztJQUNGLE1BQU0sQ0FBQyxJQUFJLENBQUMsa0JBQWtCLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUM5QyxrQkFBa0IsQ0FBQyxHQUFHLENBQUMsS0FBSyxTQUFTLElBQUksT0FBTyxrQkFBa0IsQ0FBQyxHQUFHLENBQUMsQ0FDeEUsQ0FBQztJQUVGLE9BQU8sa0JBQWtCLENBQUM7QUFDNUIsQ0FBQztBQUNELFNBQVMscUJBQXFCLENBQzVCLE9BQTJCO0lBRTNCLE1BQU0sb0JBQW9CLEdBQXVCLEVBQUUsQ0FBQztJQUNwRCxxQkFBcUIsQ0FBQyxPQUFPLENBQUMsQ0FBQyxHQUFHLEVBQUUsRUFBRTtRQUNwQyxJQUFJLEdBQUcsSUFBSSxPQUFPLEVBQUU7WUFDbEIsb0JBQW9CLENBQUMsR0FBRyxDQUFDLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1NBQzFDO0lBQ0gsQ0FBQyxDQUFDLENBQUM7SUFDSCxPQUFPLG9CQUFvQixDQUFDO0FBQzlCLENBQUM7QUFDRCxTQUFTLDBCQUEwQixDQUNqQyxPQUF3QjtJQUV4QixNQUFNLG9CQUFvQixHQUFvQixFQUFFLENBQUM7SUFFakQsa0JBQWtCLENBQUMsT0FBTyxDQUFDLENBQUMsR0FBRyxFQUFFLEVBQUU7UUFDakMsSUFBSSxHQUFHLElBQUksT0FBTyxFQUFFO1lBQ2xCLG9CQUFvQixDQUFDLEdBQUcsQ0FBQyxHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQztTQUMxQztJQUNILENBQUMsQ0FBQyxDQUFDO0lBRUgsT0FBTyxvQkFBb0IsQ0FBQztBQUM5QixDQUFDO0FBQ0QsTUFBTSxVQUFVLHVCQUF1QixDQUNyQyxlQUFnQyxFQUNoQyxrQkFBc0M7SUFFdEMsSUFBSSxRQUFRLEdBQUcsYUFBYSxDQUFDO0lBQzdCLElBQUksa0JBQWtCLENBQUMsT0FBTyxFQUFFO1FBQzlCLFFBQVEsR0FBRywyQkFBMkIsQ0FBQztLQUN4QztJQUNELE1BQU0sY0FBYyxHQUFvQjtRQUN0QyxLQUFLLEVBQUUsS0FBSztRQUNaLFFBQVEsRUFBRSxRQUFRO1FBQ2xCLEVBQUUsRUFBRSxJQUFJO0tBQ1QsQ0FBQztJQUNGLE1BQU0sWUFBWSxHQUFvQixRQUFRLENBQUM7UUFDN0MsY0FBYztRQUNkLDBCQUEwQixDQUFDLGVBQWUsQ0FBQztRQUMzQyxxQkFBcUIsQ0FBQyxrQkFBa0IsQ0FBQztLQUMxQyxDQUFDLENBQUM7SUFFSCxPQUFPLFlBQVksQ0FBQztBQUN0QixDQUFDO0FBRUQsTUFBTSxVQUFVLHFCQUFxQixDQUNuQyxlQUFnQyxFQUNoQyxrQkFBc0MsRUFDdEMsYUFBNEI7SUFFNUIsTUFBTSxjQUFjLEdBQWtCO1FBQ3BDLEtBQUssRUFBRSxLQUFLO1FBQ1osS0FBSyxFQUFFLEtBQUs7UUFDWixFQUFFLEVBQUUsSUFBSTtLQUNULENBQUM7SUFFRixNQUFNLHVCQUF1QixHQUFHLHdCQUF3QixDQUN0RCxrQkFBa0IsQ0FDbkIsQ0FBQztJQUNGLE1BQU0sWUFBWSxHQUFrQixRQUFRLENBQUM7UUFDM0MsY0FBYztRQUNkLGVBQWU7UUFDZixhQUFhO1FBQ2IsdUJBQXVCO0tBQ3hCLENBQWtCLENBQUM7SUFFcEIsT0FBTyxZQUFZLENBQUM7QUFDdEIsQ0FBQztBQUNELE1BQU0sVUFBVSxrQkFBa0IsQ0FDaEMsa0JBQXNDLEVBQ3RDLE9BQWdCO0lBRWhCLE1BQU0sY0FBYyxHQUErQjtRQUNqRCxLQUFLLEVBQUUsQ0FBQyxXQUFXLENBQUM7UUFDcEIsS0FBSyxFQUFFLE9BQU87UUFDZCxLQUFLLEVBQUUsS0FBSztLQUNiLENBQUM7SUFDRixNQUFNLFlBQVksR0FBK0IsUUFBUSxDQUFDO1FBQ3hELGNBQWM7UUFDZCxrQkFBa0I7S0FDbkIsQ0FBK0IsQ0FBQztJQUVqQyxPQUFPLFlBQVksQ0FBQztBQUN0QixDQUFDO0FBQ0QsTUFBTSxjQUFjLEdBQUcsQ0FBQyxDQUFVLEVBQUUsV0FBb0IsRUFBRSxFQUFXLEVBQUUsRUFBRSxDQUN2RSxXQUFXLENBQUM7QUFFZCxNQUFNLFVBQVUsUUFBUSxDQUFDLEdBQWM7SUFDckMsT0FBTyxTQUFTLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxFQUFFLFVBQVUsRUFBRSxjQUFjLEVBQUUsQ0FBQyxDQUFDO0FBQzVELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBSdW5Xb3JrZmxvd09wdGlvbnMsXG4gIFNvdXJjZU9wdGlvbnMsXG4gIFdvcmtmbG93T3B0aW9ucyxcbn0gZnJvbSBcIi4vaW50ZXJmYWNlLnRzXCI7XG5pbXBvcnQgeyBJbnRlcm5hbFJ1bldvcmtmbG93T3B0aW9ucyB9IGZyb20gXCIuL2ludGVybmFsLWludGVyZmFjZS50c1wiO1xuaW1wb3J0IGRlZXBtZXJnZSBmcm9tIFwiaHR0cHM6Ly9lc20uc2gvZGVlcG1lcmdlQDQuMi4yXCI7XG5cbmNvbnN0IFZhbGlkV29ya2Zsb3dGbGFncyA9IFtcbiAgXCJpZlwiLFxuICBcImRlYnVnXCIsXG4gIFwiZGF0YWJhc2VcIixcbiAgXCJzbGVlcFwiLFxuICBcImxpbWl0XCIsXG4gIFwiZm9yY2VcIixcbl07XG5jb25zdCBWYWxpZENsaVdvcmtmbG93RmxhZ3MgPSBWYWxpZFdvcmtmbG93RmxhZ3MuY29uY2F0KFwiZmlsZXNcIik7XG5mdW5jdGlvbiBmaWx0ZXJWYWxpZFNvdXJjZU9wdGlvbnMoXG4gIG9wdGlvbnM6IFJ1bldvcmtmbG93T3B0aW9ucyxcbik6IFNvdXJjZU9wdGlvbnMge1xuICBjb25zdCB7IGZvcmNlLCBsaW1pdCwgZGVidWcgfSA9IG9wdGlvbnMgfHwge307XG5cbiAgY29uc3QgdmFsaWRTb3VyY2VPcHRpb25zOiBSZWNvcmQ8c3RyaW5nLCB1bmtub3duPiA9IHtcbiAgICBmb3JjZSxcbiAgICBsaW1pdCxcbiAgICBkZWJ1ZyxcbiAgfTtcbiAgT2JqZWN0LmtleXModmFsaWRTb3VyY2VPcHRpb25zKS5mb3JFYWNoKChrZXkpID0+XG4gICAgdmFsaWRTb3VyY2VPcHRpb25zW2tleV0gPT09IHVuZGVmaW5lZCAmJiBkZWxldGUgdmFsaWRTb3VyY2VPcHRpb25zW2tleV1cbiAgKTtcblxuICByZXR1cm4gdmFsaWRTb3VyY2VPcHRpb25zO1xufVxuZnVuY3Rpb24gZmlsdGVyVmFsaWRDbGlPcHRpb25zKFxuICBvcHRpb25zOiBSdW5Xb3JrZmxvd09wdGlvbnMsXG4pOiBSdW5Xb3JrZmxvd09wdGlvbnMge1xuICBjb25zdCB2YWxpZFdvcmtmbG93T3B0aW9uczogUnVuV29ya2Zsb3dPcHRpb25zID0ge307XG4gIFZhbGlkQ2xpV29ya2Zsb3dGbGFncy5mb3JFYWNoKChrZXkpID0+IHtcbiAgICBpZiAoa2V5IGluIG9wdGlvbnMpIHtcbiAgICAgIHZhbGlkV29ya2Zsb3dPcHRpb25zW2tleV0gPSBvcHRpb25zW2tleV07XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIHZhbGlkV29ya2Zsb3dPcHRpb25zO1xufVxuZnVuY3Rpb24gZmlsdGVyVmFsaWRXb3JrZmxvd09wdGlvbnMoXG4gIG9wdGlvbnM6IFdvcmtmbG93T3B0aW9ucyxcbik6IFdvcmtmbG93T3B0aW9ucyB7XG4gIGNvbnN0IHZhbGlkV29ya2Zsb3dPcHRpb25zOiBXb3JrZmxvd09wdGlvbnMgPSB7fTtcblxuICBWYWxpZFdvcmtmbG93RmxhZ3MuZm9yRWFjaCgoa2V5KSA9PiB7XG4gICAgaWYgKGtleSBpbiBvcHRpb25zKSB7XG4gICAgICB2YWxpZFdvcmtmbG93T3B0aW9uc1trZXldID0gb3B0aW9uc1trZXldO1xuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIHZhbGlkV29ya2Zsb3dPcHRpb25zO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGdldEZpbmFsV29ya2Zsb3dPcHRpb25zKFxuICBXb3JrZmxvd09wdGlvbnM6IFdvcmtmbG93T3B0aW9ucyxcbiAgcnVuV29ya2Zsb3dPcHRpb25zOiBSdW5Xb3JrZmxvd09wdGlvbnMsXG4pOiBXb3JrZmxvd09wdGlvbnMge1xuICBsZXQgZGF0YWJhc2UgPSBcImpzb246Ly9kYXRhXCI7XG4gIGlmIChydW5Xb3JrZmxvd09wdGlvbnMuY29udGVudCkge1xuICAgIGRhdGFiYXNlID0gXCJqc29uOi8vL3RtcC9kZW5vZmxvdy9kYXRhXCI7XG4gIH1cbiAgY29uc3QgZGVmYXVsdE9wdGlvbnM6IFdvcmtmbG93T3B0aW9ucyA9IHtcbiAgICBkZWJ1ZzogZmFsc2UsXG4gICAgZGF0YWJhc2U6IGRhdGFiYXNlLFxuICAgIGlmOiB0cnVlLFxuICB9O1xuICBjb25zdCBmaW5hbE9wdGlvbnM6IFdvcmtmbG93T3B0aW9ucyA9IG1lcmdlQWxsKFtcbiAgICBkZWZhdWx0T3B0aW9ucyxcbiAgICBmaWx0ZXJWYWxpZFdvcmtmbG93T3B0aW9ucyhXb3JrZmxvd09wdGlvbnMpLFxuICAgIGZpbHRlclZhbGlkQ2xpT3B0aW9ucyhydW5Xb3JrZmxvd09wdGlvbnMpLFxuICBdKTtcblxuICByZXR1cm4gZmluYWxPcHRpb25zO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0RmluYWxTb3VyY2VPcHRpb25zKFxuICBXb3JrZmxvd09wdGlvbnM6IFdvcmtmbG93T3B0aW9ucyxcbiAgcnVuV29ya2Zsb3dPcHRpb25zOiBSdW5Xb3JrZmxvd09wdGlvbnMsXG4gIHNvdXJjZU9wdGlvbnM6IFNvdXJjZU9wdGlvbnMsXG4pOiBTb3VyY2VPcHRpb25zIHtcbiAgY29uc3QgZGVmYXVsdE9wdGlvbnM6IFNvdXJjZU9wdGlvbnMgPSB7XG4gICAgZm9yY2U6IGZhbHNlLFxuICAgIGRlYnVnOiBmYWxzZSxcbiAgICBpZjogdHJ1ZSxcbiAgfTtcblxuICBjb25zdCB2YWxpZFJ1bldvcmtmbG93T3B0aW9ucyA9IGZpbHRlclZhbGlkU291cmNlT3B0aW9ucyhcbiAgICBydW5Xb3JrZmxvd09wdGlvbnMsXG4gICk7XG4gIGNvbnN0IGZpbmFsT3B0aW9uczogU291cmNlT3B0aW9ucyA9IG1lcmdlQWxsKFtcbiAgICBkZWZhdWx0T3B0aW9ucyxcbiAgICBXb3JrZmxvd09wdGlvbnMsXG4gICAgc291cmNlT3B0aW9ucyxcbiAgICB2YWxpZFJ1bldvcmtmbG93T3B0aW9ucyxcbiAgXSkgYXMgU291cmNlT3B0aW9ucztcblxuICByZXR1cm4gZmluYWxPcHRpb25zO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGdldEZpbmFsUnVuT3B0aW9ucyhcbiAgcnVuV29ya2Zsb3dPcHRpb25zOiBSdW5Xb3JrZmxvd09wdGlvbnMsXG4gIGlzRGVidWc6IGJvb2xlYW4sXG4pOiBJbnRlcm5hbFJ1bldvcmtmbG93T3B0aW9ucyB7XG4gIGNvbnN0IGRlZmF1bHRPcHRpb25zOiBJbnRlcm5hbFJ1bldvcmtmbG93T3B0aW9ucyA9IHtcbiAgICBmaWxlczogW1wid29ya2Zsb3dzXCJdLFxuICAgIGRlYnVnOiBpc0RlYnVnLFxuICAgIHN0ZGluOiBmYWxzZSxcbiAgfTtcbiAgY29uc3QgZmluYWxPcHRpb25zOiBJbnRlcm5hbFJ1bldvcmtmbG93T3B0aW9ucyA9IG1lcmdlQWxsKFtcbiAgICBkZWZhdWx0T3B0aW9ucyxcbiAgICBydW5Xb3JrZmxvd09wdGlvbnMsXG4gIF0pIGFzIEludGVybmFsUnVuV29ya2Zsb3dPcHRpb25zO1xuXG4gIHJldHVybiBmaW5hbE9wdGlvbnM7XG59XG5jb25zdCBvdmVyd3JpdGVNZXJnZSA9IChfOiB1bmtub3duLCBzb3VyY2VBcnJheTogdW5rbm93biwgX186IHVua25vd24pID0+XG4gIHNvdXJjZUFycmF5O1xuXG5leHBvcnQgZnVuY3Rpb24gbWVyZ2VBbGwoYXJyOiB1bmtub3duW10pIHtcbiAgcmV0dXJuIGRlZXBtZXJnZS5hbGwoYXJyLCB7IGFycmF5TWVyZ2U6IG92ZXJ3cml0ZU1lcmdlIH0pO1xufVxuIl19
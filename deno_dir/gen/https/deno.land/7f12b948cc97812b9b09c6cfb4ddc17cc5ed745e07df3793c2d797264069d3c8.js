import { bytesToUuid, createBuffer, stringToBytes, uuidToBytes, } from "./_common.ts";
import { Sha1 } from "../hash/sha1.ts";
import { isString } from "../node/util.ts";
import { assert } from "../testing/asserts.ts";
const UUID_RE = /^[0-9a-f]{8}-[0-9a-f]{4}-[5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i;
export function validate(id) {
    return UUID_RE.test(id);
}
export function generate(options, buf, offset) {
    const i = (buf && offset) || 0;
    let { value, namespace } = options;
    if (isString(value))
        value = stringToBytes(value);
    if (isString(namespace))
        namespace = uuidToBytes(namespace);
    assert(namespace.length === 16, "namespace must be uuid string or an Array of 16 byte values");
    const content = namespace.concat(value);
    const bytes = new Sha1().update(createBuffer(content)).digest();
    bytes[6] = (bytes[6] & 0x0f) | 0x50;
    bytes[8] = (bytes[8] & 0x3f) | 0x80;
    if (buf) {
        for (let idx = 0; idx < 16; ++idx) {
            buf[i + idx] = bytes[idx];
        }
    }
    return buf || bytesToUuid(bytes);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidjUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJ2NS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxPQUFPLEVBQ0wsV0FBVyxFQUNYLFlBQVksRUFDWixhQUFhLEVBQ2IsV0FBVyxHQUNaLE1BQU0sY0FBYyxDQUFDO0FBQ3RCLE9BQU8sRUFBRSxJQUFJLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUN2QyxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDM0MsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBRS9DLE1BQU0sT0FBTyxHQUFHLDBFQUEwRSxDQUFDO0FBRTNGLE1BQU0sVUFBVSxRQUFRLENBQUMsRUFBVTtJQUNqQyxPQUFPLE9BQU8sQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUM7QUFDMUIsQ0FBQztBQU9ELE1BQU0sVUFBVSxRQUFRLENBQ3RCLE9BQWtCLEVBQ2xCLEdBQWMsRUFDZCxNQUFlO0lBRWYsTUFBTSxDQUFDLEdBQUcsQ0FBQyxHQUFHLElBQUksTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBRS9CLElBQUksRUFBRSxLQUFLLEVBQUUsU0FBUyxFQUFFLEdBQUcsT0FBTyxDQUFDO0lBQ25DLElBQUksUUFBUSxDQUFDLEtBQUssQ0FBQztRQUFFLEtBQUssR0FBRyxhQUFhLENBQUMsS0FBZSxDQUFDLENBQUM7SUFDNUQsSUFBSSxRQUFRLENBQUMsU0FBUyxDQUFDO1FBQUUsU0FBUyxHQUFHLFdBQVcsQ0FBQyxTQUFtQixDQUFDLENBQUM7SUFDdEUsTUFBTSxDQUNKLFNBQVMsQ0FBQyxNQUFNLEtBQUssRUFBRSxFQUN2Qiw2REFBNkQsQ0FDOUQsQ0FBQztJQUVGLE1BQU0sT0FBTyxHQUFJLFNBQXNCLENBQUMsTUFBTSxDQUFDLEtBQWlCLENBQUMsQ0FBQztJQUNsRSxNQUFNLEtBQUssR0FBRyxJQUFJLElBQUksRUFBRSxDQUFDLE1BQU0sQ0FBQyxZQUFZLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQztJQUVoRSxLQUFLLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDO0lBQ3BDLEtBQUssQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxJQUFJLENBQUM7SUFFcEMsSUFBSSxHQUFHLEVBQUU7UUFDUCxLQUFLLElBQUksR0FBRyxHQUFHLENBQUMsRUFBRSxHQUFHLEdBQUcsRUFBRSxFQUFFLEVBQUUsR0FBRyxFQUFFO1lBQ2pDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDLEdBQUcsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1NBQzNCO0tBQ0Y7SUFFRCxPQUFPLEdBQUcsSUFBSSxXQUFXLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDbkMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE4LTIwMjAgdGhlIERlbm8gYXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC4gTUlUIGxpY2Vuc2UuXG5cbmltcG9ydCB7XG4gIGJ5dGVzVG9VdWlkLFxuICBjcmVhdGVCdWZmZXIsXG4gIHN0cmluZ1RvQnl0ZXMsXG4gIHV1aWRUb0J5dGVzLFxufSBmcm9tIFwiLi9fY29tbW9uLnRzXCI7XG5pbXBvcnQgeyBTaGExIH0gZnJvbSBcIi4uL2hhc2gvc2hhMS50c1wiO1xuaW1wb3J0IHsgaXNTdHJpbmcgfSBmcm9tIFwiLi4vbm9kZS91dGlsLnRzXCI7XG5pbXBvcnQgeyBhc3NlcnQgfSBmcm9tIFwiLi4vdGVzdGluZy9hc3NlcnRzLnRzXCI7XG5cbmNvbnN0IFVVSURfUkUgPSAvXlswLTlhLWZdezh9LVswLTlhLWZdezR9LVs1XVswLTlhLWZdezN9LVs4OWFiXVswLTlhLWZdezN9LVswLTlhLWZdezEyfSQvaTtcblxuZXhwb3J0IGZ1bmN0aW9uIHZhbGlkYXRlKGlkOiBzdHJpbmcpOiBib29sZWFuIHtcbiAgcmV0dXJuIFVVSURfUkUudGVzdChpZCk7XG59XG5cbmludGVyZmFjZSBWNU9wdGlvbnMge1xuICB2YWx1ZTogc3RyaW5nIHwgbnVtYmVyW107XG4gIG5hbWVzcGFjZTogc3RyaW5nIHwgbnVtYmVyW107XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZW5lcmF0ZShcbiAgb3B0aW9uczogVjVPcHRpb25zLFxuICBidWY/OiBudW1iZXJbXSxcbiAgb2Zmc2V0PzogbnVtYmVyXG4pOiBzdHJpbmcgfCBudW1iZXJbXSB7XG4gIGNvbnN0IGkgPSAoYnVmICYmIG9mZnNldCkgfHwgMDtcblxuICBsZXQgeyB2YWx1ZSwgbmFtZXNwYWNlIH0gPSBvcHRpb25zO1xuICBpZiAoaXNTdHJpbmcodmFsdWUpKSB2YWx1ZSA9IHN0cmluZ1RvQnl0ZXModmFsdWUgYXMgc3RyaW5nKTtcbiAgaWYgKGlzU3RyaW5nKG5hbWVzcGFjZSkpIG5hbWVzcGFjZSA9IHV1aWRUb0J5dGVzKG5hbWVzcGFjZSBhcyBzdHJpbmcpO1xuICBhc3NlcnQoXG4gICAgbmFtZXNwYWNlLmxlbmd0aCA9PT0gMTYsXG4gICAgXCJuYW1lc3BhY2UgbXVzdCBiZSB1dWlkIHN0cmluZyBvciBhbiBBcnJheSBvZiAxNiBieXRlIHZhbHVlc1wiXG4gICk7XG5cbiAgY29uc3QgY29udGVudCA9IChuYW1lc3BhY2UgYXMgbnVtYmVyW10pLmNvbmNhdCh2YWx1ZSBhcyBudW1iZXJbXSk7XG4gIGNvbnN0IGJ5dGVzID0gbmV3IFNoYTEoKS51cGRhdGUoY3JlYXRlQnVmZmVyKGNvbnRlbnQpKS5kaWdlc3QoKTtcblxuICBieXRlc1s2XSA9IChieXRlc1s2XSAmIDB4MGYpIHwgMHg1MDtcbiAgYnl0ZXNbOF0gPSAoYnl0ZXNbOF0gJiAweDNmKSB8IDB4ODA7XG5cbiAgaWYgKGJ1Zikge1xuICAgIGZvciAobGV0IGlkeCA9IDA7IGlkeCA8IDE2OyArK2lkeCkge1xuICAgICAgYnVmW2kgKyBpZHhdID0gYnl0ZXNbaWR4XTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gYnVmIHx8IGJ5dGVzVG9VdWlkKGJ5dGVzKTtcbn1cbiJdfQ==
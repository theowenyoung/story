import SqliteError from "./error.ts";
// Move string to C
export function setStr(wasm, str, closure) {
    const bytes = new TextEncoder().encode(str);
    const ptr = wasm.malloc(bytes.length + 1);
    if (ptr === 0) {
        throw new SqliteError("Out of memory.");
    }
    const mem = new Uint8Array(wasm.memory.buffer, ptr, bytes.length + 1);
    mem.set(bytes);
    mem[bytes.length] = 0; // \0 terminator
    closure(ptr);
    wasm.free(ptr);
}
// Move Uint8Array to C
export function setArr(wasm, arr, closure) {
    const ptr = wasm.malloc(arr.length);
    if (ptr === 0) {
        throw new SqliteError("Out of memory.");
    }
    const mem = new Uint8Array(wasm.memory.buffer, ptr, arr.length);
    mem.set(arr);
    closure(ptr);
    wasm.free(ptr);
}
// Read string from C
export function getStr(wasm, ptr) {
    const len = wasm.str_len(ptr);
    const bytes = new Uint8Array(wasm.memory.buffer, ptr, len);
    if (len > 16) {
        return new TextDecoder().decode(bytes);
    } else {
        // This optimization is lifted from EMSCRIPTEN's glue code
        let str = "";
        let idx = 0;
        while(idx < len){
            var u0 = bytes[idx++];
            if (!(u0 & 0x80)) {
                str += String.fromCharCode(u0);
                continue;
            }
            var u1 = bytes[idx++] & 63;
            if ((u0 & 0xE0) == 0xC0) {
                str += String.fromCharCode((u0 & 31) << 6 | u1);
                continue;
            }
            var u2 = bytes[idx++] & 63;
            if ((u0 & 0xF0) == 0xE0) {
                u0 = (u0 & 15) << 12 | u1 << 6 | u2;
            } else {
                // cut warning
                u0 = (u0 & 7) << 18 | u1 << 12 | u2 << 6 | bytes[idx++] & 63;
            }
            if (u0 < 0x10000) {
                str += String.fromCharCode(u0);
            } else {
                var ch = u0 - 0x10000;
                str += String.fromCharCode(0xD800 | ch >> 10, 0xDC00 | ch & 0x3FF);
            }
        }
        return str;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImh0dHBzOi8vZGVuby5sYW5kL3gvc3FsaXRlQHYyLjMuMi9zcmMvd2FzbS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgU3FsaXRlRXJyb3IgZnJvbSBcIi4vZXJyb3IudHNcIjtcblxuLy8gTW92ZSBzdHJpbmcgdG8gQ1xuZXhwb3J0IGZ1bmN0aW9uIHNldFN0cihcbiAgd2FzbTogYW55LFxuICBzdHI6IHN0cmluZyxcbiAgY2xvc3VyZTogKHB0cjogbnVtYmVyKSA9PiB2b2lkLFxuKSB7XG4gIGNvbnN0IGJ5dGVzID0gbmV3IFRleHRFbmNvZGVyKCkuZW5jb2RlKHN0cik7XG4gIGNvbnN0IHB0ciA9IHdhc20ubWFsbG9jKGJ5dGVzLmxlbmd0aCArIDEpO1xuICBpZiAocHRyID09PSAwKSB7XG4gICAgdGhyb3cgbmV3IFNxbGl0ZUVycm9yKFwiT3V0IG9mIG1lbW9yeS5cIik7XG4gIH1cbiAgY29uc3QgbWVtID0gbmV3IFVpbnQ4QXJyYXkod2FzbS5tZW1vcnkuYnVmZmVyLCBwdHIsIGJ5dGVzLmxlbmd0aCArIDEpO1xuICBtZW0uc2V0KGJ5dGVzKTtcbiAgbWVtW2J5dGVzLmxlbmd0aF0gPSAwOyAvLyBcXDAgdGVybWluYXRvclxuICBjbG9zdXJlKHB0cik7XG4gIHdhc20uZnJlZShwdHIpO1xufVxuXG4vLyBNb3ZlIFVpbnQ4QXJyYXkgdG8gQ1xuZXhwb3J0IGZ1bmN0aW9uIHNldEFycihcbiAgd2FzbTogYW55LFxuICBhcnI6IFVpbnQ4QXJyYXksXG4gIGNsb3N1cmU6IChwdHI6IG51bWJlcikgPT4gdm9pZCxcbikge1xuICBjb25zdCBwdHIgPSB3YXNtLm1hbGxvYyhhcnIubGVuZ3RoKTtcbiAgaWYgKHB0ciA9PT0gMCkge1xuICAgIHRocm93IG5ldyBTcWxpdGVFcnJvcihcIk91dCBvZiBtZW1vcnkuXCIpO1xuICB9XG4gIGNvbnN0IG1lbSA9IG5ldyBVaW50OEFycmF5KHdhc20ubWVtb3J5LmJ1ZmZlciwgcHRyLCBhcnIubGVuZ3RoKTtcbiAgbWVtLnNldChhcnIpO1xuICBjbG9zdXJlKHB0cik7XG4gIHdhc20uZnJlZShwdHIpO1xufVxuXG4vLyBSZWFkIHN0cmluZyBmcm9tIENcbmV4cG9ydCBmdW5jdGlvbiBnZXRTdHIod2FzbTogYW55LCBwdHI6IG51bWJlcik6IHN0cmluZyB7XG4gIGNvbnN0IGxlbiA9IHdhc20uc3RyX2xlbihwdHIpO1xuICBjb25zdCBieXRlcyA9IG5ldyBVaW50OEFycmF5KHdhc20ubWVtb3J5LmJ1ZmZlciwgcHRyLCBsZW4pO1xuICBpZiAobGVuID4gMTYpIHtcbiAgICByZXR1cm4gbmV3IFRleHREZWNvZGVyKCkuZGVjb2RlKGJ5dGVzKTtcbiAgfSBlbHNlIHtcbiAgICAvLyBUaGlzIG9wdGltaXphdGlvbiBpcyBsaWZ0ZWQgZnJvbSBFTVNDUklQVEVOJ3MgZ2x1ZSBjb2RlXG4gICAgbGV0IHN0ciA9IFwiXCI7XG4gICAgbGV0IGlkeCA9IDA7XG4gICAgd2hpbGUgKGlkeCA8IGxlbikge1xuICAgICAgdmFyIHUwID0gYnl0ZXNbaWR4KytdO1xuICAgICAgaWYgKCEodTAgJiAweDgwKSkge1xuICAgICAgICBzdHIgKz0gU3RyaW5nLmZyb21DaGFyQ29kZSh1MCk7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgdmFyIHUxID0gYnl0ZXNbaWR4KytdICYgNjM7XG4gICAgICBpZiAoKHUwICYgMHhFMCkgPT0gMHhDMCkge1xuICAgICAgICBzdHIgKz0gU3RyaW5nLmZyb21DaGFyQ29kZSgoKHUwICYgMzEpIDw8IDYpIHwgdTEpO1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIHZhciB1MiA9IGJ5dGVzW2lkeCsrXSAmIDYzO1xuICAgICAgaWYgKCh1MCAmIDB4RjApID09IDB4RTApIHtcbiAgICAgICAgdTAgPSAoKHUwICYgMTUpIDw8IDEyKSB8ICh1MSA8PCA2KSB8IHUyO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gY3V0IHdhcm5pbmdcbiAgICAgICAgdTAgPSAoKHUwICYgNykgPDwgMTgpIHwgKHUxIDw8IDEyKSB8ICh1MiA8PCA2KSB8IChieXRlc1tpZHgrK10gJiA2Myk7XG4gICAgICB9XG4gICAgICBpZiAodTAgPCAweDEwMDAwKSB7XG4gICAgICAgIHN0ciArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKHUwKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciBjaCA9IHUwIC0gMHgxMDAwMDtcbiAgICAgICAgc3RyICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoMHhEODAwIHwgKGNoID4+IDEwKSwgMHhEQzAwIHwgKGNoICYgMHgzRkYpKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHN0cjtcbiAgfVxufVxuIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8saUJBQWlCLGFBQWE7QUFFckMsbUJBQW1CO0FBQ25CLE9BQU8sU0FBUyxPQUNkLElBQVMsRUFDVCxHQUFXLEVBQ1gsT0FBOEIsRUFDOUI7SUFDQSxNQUFNLFFBQVEsSUFBSSxjQUFjLE1BQU0sQ0FBQztJQUN2QyxNQUFNLE1BQU0sS0FBSyxNQUFNLENBQUMsTUFBTSxNQUFNLEdBQUc7SUFDdkMsSUFBSSxRQUFRLEdBQUc7UUFDYixNQUFNLElBQUksWUFBWSxrQkFBa0I7SUFDMUMsQ0FBQztJQUNELE1BQU0sTUFBTSxJQUFJLFdBQVcsS0FBSyxNQUFNLENBQUMsTUFBTSxFQUFFLEtBQUssTUFBTSxNQUFNLEdBQUc7SUFDbkUsSUFBSSxHQUFHLENBQUM7SUFDUixHQUFHLENBQUMsTUFBTSxNQUFNLENBQUMsR0FBRyxHQUFHLGdCQUFnQjtJQUN2QyxRQUFRO0lBQ1IsS0FBSyxJQUFJLENBQUM7QUFDWixDQUFDO0FBRUQsdUJBQXVCO0FBQ3ZCLE9BQU8sU0FBUyxPQUNkLElBQVMsRUFDVCxHQUFlLEVBQ2YsT0FBOEIsRUFDOUI7SUFDQSxNQUFNLE1BQU0sS0FBSyxNQUFNLENBQUMsSUFBSSxNQUFNO0lBQ2xDLElBQUksUUFBUSxHQUFHO1FBQ2IsTUFBTSxJQUFJLFlBQVksa0JBQWtCO0lBQzFDLENBQUM7SUFDRCxNQUFNLE1BQU0sSUFBSSxXQUFXLEtBQUssTUFBTSxDQUFDLE1BQU0sRUFBRSxLQUFLLElBQUksTUFBTTtJQUM5RCxJQUFJLEdBQUcsQ0FBQztJQUNSLFFBQVE7SUFDUixLQUFLLElBQUksQ0FBQztBQUNaLENBQUM7QUFFRCxxQkFBcUI7QUFDckIsT0FBTyxTQUFTLE9BQU8sSUFBUyxFQUFFLEdBQVcsRUFBVTtJQUNyRCxNQUFNLE1BQU0sS0FBSyxPQUFPLENBQUM7SUFDekIsTUFBTSxRQUFRLElBQUksV0FBVyxLQUFLLE1BQU0sQ0FBQyxNQUFNLEVBQUUsS0FBSztJQUN0RCxJQUFJLE1BQU0sSUFBSTtRQUNaLE9BQU8sSUFBSSxjQUFjLE1BQU0sQ0FBQztJQUNsQyxPQUFPO1FBQ0wsMERBQTBEO1FBQzFELElBQUksTUFBTTtRQUNWLElBQUksTUFBTTtRQUNWLE1BQU8sTUFBTSxJQUFLO1lBQ2hCLElBQUksS0FBSyxLQUFLLENBQUMsTUFBTTtZQUNyQixJQUFJLENBQUMsQ0FBQyxLQUFLLElBQUksR0FBRztnQkFDaEIsT0FBTyxPQUFPLFlBQVksQ0FBQztnQkFDM0IsUUFBUztZQUNYLENBQUM7WUFDRCxJQUFJLEtBQUssS0FBSyxDQUFDLE1BQU0sR0FBRztZQUN4QixJQUFJLENBQUMsS0FBSyxJQUFJLEtBQUssTUFBTTtnQkFDdkIsT0FBTyxPQUFPLFlBQVksQ0FBQyxBQUFDLENBQUMsS0FBSyxFQUFFLEtBQUssSUFBSztnQkFDOUMsUUFBUztZQUNYLENBQUM7WUFDRCxJQUFJLEtBQUssS0FBSyxDQUFDLE1BQU0sR0FBRztZQUN4QixJQUFJLENBQUMsS0FBSyxJQUFJLEtBQUssTUFBTTtnQkFDdkIsS0FBSyxBQUFDLENBQUMsS0FBSyxFQUFFLEtBQUssS0FBTyxNQUFNLElBQUs7WUFDdkMsT0FBTztnQkFDTCxjQUFjO2dCQUNkLEtBQUssQUFBQyxDQUFDLEtBQUssQ0FBQyxLQUFLLEtBQU8sTUFBTSxLQUFPLE1BQU0sSUFBTSxLQUFLLENBQUMsTUFBTSxHQUFHO1lBQ25FLENBQUM7WUFDRCxJQUFJLEtBQUssU0FBUztnQkFDaEIsT0FBTyxPQUFPLFlBQVksQ0FBQztZQUM3QixPQUFPO2dCQUNMLElBQUksS0FBSyxLQUFLO2dCQUNkLE9BQU8sT0FBTyxZQUFZLENBQUMsU0FBVSxNQUFNLElBQUssU0FBVSxLQUFLO1lBQ2pFLENBQUM7UUFDSDtRQUNBLE9BQU87SUFDVCxDQUFDO0FBQ0gsQ0FBQyJ9